set nocompatible

" Turn on syntax highlighting.
syntax on

colorscheme zenburn
let g:airline_theme='minimalist'

set pumheight=10

" Disable the default Vim startup message.
set shortmess+=I

set splitbelow                          " Horizontal splits will automatically be below
set splitright                          " Vertical splits will automatically be to the right
set number

set relativenumber

" Always show the status line at the bottom, even if you only have one window open.
set laststatus=2

set hidden
set autoindent
set nosmartindent                       " prevents extra indenting
set lbr

set expandtab
set tabstop=2
set shiftwidth=2
set softtabstop=2
set smarttab

set laststatus=0                        " Always display the status line
set cursorline                          " Enable highlighting of the current line
set background=dark



" This setting makes search case-insensitive when all characters in the string
" being searched are lowercase. However, the search becomes case-sensitive if
" it contains any capital letters. This makes searching more convenient.
set ignorecase
set smartcase

" Enable searching as you type, rather than waiting till you press enter.
set incsearch

" Unbind some useless/annoying default key bindings.
nmap Q <Nop> " 'Q' in normal mode enters Ex mode. You almost never want this.

" Disable audible bell because it's annoying.
set noerrorbells visualbell t_vb=

" Enable mouse support. You should avoid relying on this too much, but it can
" sometimes be convenient.
set mouse+=a

let mapleader = ","

" zoom in out for windows
noremap Zz <c-w>_ \| <c-w>\|
noremap Zo <c-w>=

" trailing whitespace
highlight ExtraWhitespace ctermbg=red guibg=red
match ExtraWhitespace /\s\+$/
au BufWinEnter * match ExtraWhitespace /\s\+$/
au InsertEnter * match ExtraWhitespace /\s\+\%#\@<!$/
au InsertLeave * match ExtraWhitespace /\s\+$/
au BufWinLeave * call clearmatches()
nnoremap <silent> <leader>rs :let _s=@/ <Bar> :%s/\s\+$//e <Bar> :let @/=_s <Bar> :nohl <Bar> :unlet _s <CR>

" remove print sttments
function! s:JbzRemoveDebugPrints()
  let save_cursor = getcurpos()
  :g/\/\/\ prdbg$/d
  call setpos('.', save_cursor)
endfunction
command! JbzRemoveDebugPrints call s:JbzRemoveDebugPrints()

au FileType c,cpp nnoremap <buffer><leader>rd :JbzRemoveDebugPrints<CR>

" ycm
set completeopt-=preview

"ctrlP
let g:ctrlp_map = '<c-p>'
let g:ctrlp_cmd = 'CtrlP'
let g:ctrlp_working_path_mode = 'ra'
let g:ctrlp_user_command = ['.git/', 'git --git-dir=%s/.git ls-files -oc --exclude-standard']

"fswitch
au BufEnter *.h  let b:fswitchdst = "c,cpp,cc,m"
au BufEnter *.cc let b:fswitchdst = "h,hpp"
au BufEnter *.h let b:fswitchdst = 'c,cpp,m,cc' | let b:fswitchlocs = 'reg:|include.*|src/**|'
nnoremap <silent> <A-o> :FSHere<cr>
" Extra hotkeys to open header/source in the split
nnoremap <silent> <leader>h :FSSplitLeft<cr>
nnoremap <silent> <leader>j :FSSplitBelow<cr>
nnoremap <silent> <leader>k :FSSplitAbove<cr>
nnoremap <silent> <leader>l :FSSplitRight<cr>

let g:vimspector_enable_mappings = 'HUMAN'
nmap <leader>dd :call vimspector#Launch()<CR>
nmap <leader>dx :VimspectorReset<CR>
nmap <leader>de :VimspectorEval
nmap <leader>dw :VimspectorWatch
nmap <leader>do :VimspectorShowOutput

" ultisnips
let g:UltiSnipsExpandTrigger="<leader>a"
let g:UltiSnipsJumpForwardTrigger="<leader>f"
let g:UltiSnipsJumpForwardTrigger="<leader>b"

" clang-format
function! s:JbzClangFormat(first, last)
  let l:winview = winsaveview()
  execute a:first . "," . a:last . "!clang-format"
  call winrestview(l:winview)
endfunction
command! -range=% JbzClangFormat call <sid>JbzClangFormat (<line1>, <line2>)

au FileType c,cpp nnoremap <buffer><leader>f :<C-u>JbzClangFormat<CR>
au FileType c,cpp vnoremap <buffer><leader>f :JbzClangFormat<CR>

" python
autocmd FileType python map <buffer><leader>c :w<CR>:exec '!python3' shellescape(@%, 1)<CR>
autocmd FileType python imap <buffer><leader>c <esc>:w<CR>:exec '!python3' shellescape(@%, 1)<CR>


" tagbar
nmap <leader>v :TagbarToggle<CR>

" emmet
let g:user_emmet_leader_key=','

" MARKDOWN PREVIEW
nmap <C-o> <Plug>MarkdownPreview
let g:mkdp_browser = 'firefox'

" nerdtree config
map <C-n> :NERDTreeToggle<CR>
autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTree") && b:NERDTree.isTabTree()) | q | endif

" latex stuff
let g:tex_flavor='latex'
let g:vimtex_view_method='zathura'
let g:vimtex_quickfix_mode=0
set conceallevel=1
let g:tex_conceal='abdmg'
let maplocalleader = ","
let g:vimtex_quickfix_open_on_warning = 0
let g:vimtex_log_ignore = [
        \ 'Underfull',
        \ 'Overfull',
        \ 'specifier changed to',
        \ 'Token not allowed in a PDF string',
      \ ]
let g:vimtex_context_pdf_viewer=1
let g:vimtex_context_pdf_viewer= 'okular'



" spelling errors
setlocal spell
set spelllang=en_gb
inoremap <C-l> <c-g>u<Esc>[s1z=`]a<c-g>u

" The Silver Searcher
if executable('ag')
  " Use ag over grep
  set grepprg=ag\ --nogroup\ --nocolor

  " Use ag in CtrlP for listing files. Lightning fast and respects .gitignore
  let g:ctrlp_user_command = 'ag %s -l --nocolor -g ""'

  " ag is fast enough that CtrlP doesn't need to cache
  let g:ctrlp_use_caching = 0
endif
" bind K to grep word under cursor
nnoremap K :grep! "\b<C-R><C-W>\b"<CR>:cw<CR>

" bind \ (backward slash) to grep shortcut
command -nargs=+ -complete=file -bar Ag silent! grep! <args>|cwindow|redraw!
nnoremap \ :Ag<SPACE>



" Plugins
call plug#begin()

  Plug 'preservim/nerdtree'
  Plug 'preservim/nerdcommenter'
  Plug 'mattn/emmet-vim'
  Plug 'jiangmiao/auto-pairs'
  Plug 'sheerun/vim-polyglot'
  Plug 'ctrlpvim/ctrlp.vim'
  Plug 'ycm-core/YouCompleteMe'
  Plug 'vim-syntastic/syntastic'
  Plug 'lervag/vimtex'
  Plug 'puremourning/vimspector'
  Plug 'unblevable/quick-scope'
  Plug 'tpope/vim-repeat'
  Plug 'iamcco/markdown-preview.nvim', { 'do': 'cd app && yarn install'  }
  Plug 'godlygeek/tabular'
  Plug 'preservim/vim-markdown'
  Plug 'vim-airline/vim-airline'
  " cpp
  Plug 'derekwyatt/vim-fswitch'
  " snippets
  Plug 'SirVer/ultisnips'
  " tagging
  Plug 'preservim/tagbar'
  Plug 'ludovicchabant/vim-gutentags'
  Plug 'vim-airline/vim-airline-themes'

call plug#end()

" Automatically install missing plugins on startup
autocmd VimEnter *
  \  if len(filter(values(g:plugs), '!isdirectory(v:val.dir)'))
  \|   PlugInstall --sync | q
  \| endif


